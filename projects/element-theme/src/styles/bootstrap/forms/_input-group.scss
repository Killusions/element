@use '../variables';

@use 'sass:string';
@use 'sass:map';

//
// Base styles
//

.input-group {
  position: relative;
  display: flex;
  flex-wrap: wrap; // For form validation feedback
  align-items: stretch;
  inline-size: 100%;

  > :is(.form-control, .form-select) {
    position: relative; // For focus state's z-index
    flex: 1 1 auto;
    inline-size: 1%;
    min-inline-size: 0; // https://stackoverflow.com/questions/36247140/why-dont-flex-items-shrink-past-content-size
  }

  // Bring the "active" form control to the top of surrounding elements
  > :is(.form-control, .form-select):focus {
    z-index: 3;
  }

  // Ensure buttons are always above inputs for more visually pleasing borders.
  // This isn't needed for `.input-group-text` since it shares the same border-color
  // as our inputs.
  .btn {
    position: relative;
    z-index: 2;

    &:focus {
      z-index: 3;
    }
  }
}

// Textual addons
//
// Serves as a catch-all element for any text or radio/checkbox input you wish
// to prepend or append to an input.

.input-group-text {
  display: flex;
  align-items: center;
  padding-block: variables.$input-group-addon-padding-y;
  padding-inline: variables.$input-group-addon-padding-x;
  font-size: variables.$input-font-size; // Match inputs
  font-weight: variables.$input-group-addon-font-weight;
  line-height: variables.$input-line-height;
  color: variables.$input-group-addon-color;
  text-align: center;
  white-space: nowrap;
  background-color: variables.$input-group-addon-bg;
  border: variables.$input-border-width solid variables.$input-group-addon-border-color;
  border-radius: variables.$input-border-radius;
}

// Rounded corners
//
// These rulesets must come after the sizing ones to properly override sm and lg
// border-radius values when extending. They're more specific than we'd like
// with the `.input-group >` part, but without it, we cannot override the sizing.

// stylelint-disable-next-line no-duplicate-selectors
.input-group {
  &:not(.has-validation) {
    > :not(:last-child):not(.dropdown-toggle):not(.dropdown-menu),
    > .dropdown-toggle:nth-last-child(n + 3) {
      border-start-end-radius: 0;
      border-end-end-radius: 0;
    }
  }

  &.has-validation {
    > :nth-last-child(n + 3):not(.dropdown-toggle):not(.dropdown-menu),
    > .dropdown-toggle:nth-last-child(n + 4) {
      border-start-end-radius: 0;
      border-end-end-radius: 0;
    }
  }

  $validation-messages: '';
  @each $state in map.keys(variables.$form-validation-states) {
    $validation-messages: $validation-messages +
      ':not(.' +
      string.unquote($state) +
      '-tooltip)' +
      ':not(.' +
      string.unquote($state) +
      '-feedback)';
  }

  > :not(:first-child):not(.dropdown-menu)#{$validation-messages} {
    margin-inline-start: -(variables.$input-border-width);
    border-start-start-radius: 0;
    border-end-start-radius: 0;
  }
}
